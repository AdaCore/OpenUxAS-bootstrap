#!/usr/bin/env python
import logging
import os
import sys

from e3.main import Main
from e3.anod.loader import AnodSpecRepository
from e3.anod.context import AnodContext
from e3.anod.sandbox import SandBox
from e3.os.process import Run

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
SPEC_DIR = os.path.join(ROOT_DIR, 'specs')
SBX_DIR = os.path.join(ROOT_DIR, 'sbx')


def check_tool(tool):
    """Check tool version and return its version.

    The function will force exit if the tool is not found.

    :param tool: tool name
    :type tool: str
    :return: the tool version
    :rtype: str
    """
    try:
        p = Run([tool, '--version'])
        version = p.out.splitlines()[0]
        return version
    except Exception:
        logging.critical("cannot find %s", tool)
        sys.exit(1)


if __name__ == '__main__':
    m = Main()
    m.argument_parser.add_argument(
        'spec_name', help='spec to build. This is '
        'the basename of an .anod file (without the extension)')
    m.argument_parser.add_argument('--qualifier', help='optional qualifier')
    m.argument_parser.add_argument(
        '--sandbox-dir',
        help='directory in which build artefacts are stored',
        default=SBX_DIR)
    m.argument_parser.add_argument(
        '--build-env',
        help='set build environment',
        action="store_true",
        default=False)
    m.parse_args()

    # Disable logging messages except errors
    logging.getLogger('').setLevel(logging.ERROR)

    asr = AnodSpecRepository(SPEC_DIR)
    ac = AnodContext(asr)
    sbx = SandBox()
    sbx.root_dir = m.args.sandbox_dir
    sbx.specs_dir = SPEC_DIR

    # The following variables are used to force recompilation
    # in case of some tool change.
    gcc_version = check_tool('gcc')
    os.environ['OPENUXAS_COMPILER_VERSION'] = gcc_version
    cmake_version = check_tool('cmake')
    os.environ['OPENUXAS_CMAKE_VERSION'] = cmake_version
    check_tool('pkg-config')

    anod_instance = ac.add_anod_action(
        name=m.args.spec_name,
        primitive='build',
        qualifier=m.args.qualifier,
        sandbox=sbx,
        upload=False).anod_instance

    saved_env = {k: v for k, v in os.environ.items()}

    if m.args.build_env:
        if hasattr(anod_instance, 'build_setenv'):
            anod_instance.build_setenv()
    else:
        if hasattr(anod_instance, 'setenv'):
            anod_instance.setenv()

    for var, value in os.environ.items():
        if var not in saved_env or saved_env[var] != os.environ[var]:
            print('export %s="%s"' % (var, value))
