#!/usr/bin/env python

from anod.util import (check_common_tools, create_anod_context,
                       create_anod_sandbox)

from e3.main import Main
from e3.anod.context import AnodContext
from e3.anod.sandbox import SandBox
from e3.env import BaseEnv
from e3.os.process import Run

import logging
import os
import sys

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
SPEC_DIR = os.path.join(ROOT_DIR, 'specs')
SBX_DIR = os.path.join(ROOT_DIR, 'sbx')


# Help users who can't remember to use eval.
BANNER = '''

# ----------------------------------------------------------------------------
# If you are seeing this, then you forgot eval.
#
# You need to run anod-setenv like this:
#
#   eval `./anod-setenv uxas`
#
# Otherwise, no changes will be made to your environment.
# ----------------------------------------------------------------------------
'''


if __name__ == '__main__':
    m = Main()
    m.argument_parser.add_argument(
        'spec_name', help='spec to build. This is '
        'the basename of an .anod file (without the extension)')
    m.argument_parser.add_argument('--qualifier', help='optional qualifier')
    m.argument_parser.add_argument(
        '--sandbox-dir',
        help='directory in which build artefacts are stored',
        default=SBX_DIR)
    m.argument_parser.add_argument(
        '--build-env',
        help='set build environment',
        action="store_true",
        default=False)
    m.parse_args()

    # Disable logging messages except errors
    logging.getLogger('').setLevel(logging.ERROR)

    check_common_tools()

    ac = create_anod_context(SPEC_DIR)
    sbx = create_anod_sandbox(m.args.sandbox_dir, SPEC_DIR)

    anod_instance = ac.add_anod_action(
        name=m.args.spec_name,
        primitive='build',
        qualifier=m.args.qualifier,
        sandbox=sbx,
        upload=False,
        env=BaseEnv.from_env()).anod_instance

    saved_env = {k: v for k, v in os.environ.items()}

    if m.args.build_env:
        if hasattr(anod_instance, 'build_setenv'):
            anod_instance.build_setenv()
    else:
        if hasattr(anod_instance, 'setenv'):
            anod_instance.setenv()

    for var, value in os.environ.items():
        if var not in saved_env or saved_env[var] != os.environ[var]:
            print('export %s="%s";' % (var, value))

            if m.args.verbose >= 1:
                print('printf "I set %s=\\\"%s\\\"\\n\\n";' % (var, value))

    print(BANNER)
