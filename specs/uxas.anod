from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.fs import mkdir, cp
import os


class Uxas(spec('common')):

    @property
    def build_deps(self):
        return [
            Anod.Dependency('pugixml'),
            Anod.Dependency('zeromq'),
            Anod.Dependency('cppzmq'),
            Anod.Dependency('uxas-lmcp', qualifier='lang=cpp'),
            Anod.Dependency('serial'),
            Anod.Dependency('czmq'),
            Anod.Dependency('zyre'),
            Anod.Dependency('sqlite'),
            Anod.Dependency('boost'),
            Anod.Dependency('sqlitecpp')]

    @property
    def build_source_list(self):
        return [Anod.Source(name='uxas-src',
                            publish=True, dest='')]

    @property
    def build_space_name(self):
        # We use a separate build space for each scenario
        return "%s-%s" % (self.name, self.scenario)

    @property
    def source_pkg_build(self):
        return [self.SourceBuilder(name='uxas-src',
                                   fullname=lambda x: 'uxas-src.tar.gz',
                                   checkout=["openuxas"])]

    @property
    def scenario(self):
        """Return selected scenario."""
        return self.parsed_qualifier.get('scenario', 'release')

    @Anod.primitive()
    def build(self):
        self.deps['zeromq'].setenv(shared=False)
        self.deps['cppzmq'].setenv()
        self.deps['pugixml'].setenv()
        self.deps['serial'].setenv()
        self.deps['uxas-lmcp'].setenv()
        self.deps['czmq'].setenv()
        self.deps['zyre'].setenv()
        self.deps['sqlite'].setenv()
        self.deps['sqlitecpp'].setenv()
        self.deps['boost'].setenv()
        self.deps['czmq'].setenv()
        self.log.info('LIBRARY_PATH: %s', os.environ['LIBRARY_PATH'])
        self.shell('gprbuild', '-j0', '-v', '-p', '-P', 'UxasAll.gpr',
                   '-XSCENARIO=%s' % self.scenario,
                   cwd=os.path.join(self['SRC_DIR'], "src"))
        mkdir(os.path.join(self.build_space.install_dir, 'bin'))
        cp(os.path.join(self.build_space.src_dir, 'src', 'uxas'),
           os.path.join(self.build_space.install_dir, 'bin'))
