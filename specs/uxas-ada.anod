from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.fs import mkdir, cp
import os


class UxasAda(spec('common')):

    @property
    def build_space_name(self):
        return 'uxas-ada-%s' % self.build_type

    @property
    def build_deps(self):
        return [Anod.Dependency('compiler'),
                Anod.Dependency('uxas', require='source_pkg'),
                Anod.Dependency('uxas-lmcp', qualifier='lang=ada'),
                Anod.Dependency('zeromq'),
                Anod.Dependency('zeromqada')]

    @property
    def build_source_list(self):
        return [Anod.Source(name='uxas-src',
                            publish=True, dest='')]

    @property
    def build_type(self):
        if 'debug' in self.parsed_qualifier:
            return 'debug'
        elif 'gcov' in self.parsed_qualifier:
            return 'gcov'
        else:
            return 'release'

    @Anod.primitive()
    def build(self):
        self.deps['zeromqada'].setenv()
        self.deps['uxas-lmcp'].setenv()
        self.deps['zeromq'].setenv()
        prj_file = os.path.join(self.build_space.src_dir,
                                'ada', 'arv-demo',
                                'afrl_ada_dev.gpr')

        self.shell('gprbuild', '-j0', '-p', '-P', prj_file,
                   '-XAPP_MODE=%s' % self.build_type,
                   '--relocate-build-tree',
                   cwd=self.build_space.build_dir)
        mkdir(os.path.join(self.build_space.install_dir, 'bin'))
        cp(os.path.join(self.build_space.build_dir, 'demo'),
           os.path.join(self.build_space.install_dir, 'bin'))
