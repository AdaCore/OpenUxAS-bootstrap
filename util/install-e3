#! /usr/bin/env python

from __future__ import annotations

from support.arguments import (add_logging_group,
                               add_interactive_group,
                               add_update_group,
                               add_package_group,
                               add_dry_run_argument)
from support.commands import Command, run_command_and_exit_on_fail
from support.log import configure_logging

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import (
        Dict,
        List,
    )

APT_UPDATE = Command(
    cmd=['sudo',
         'apt',
         'update'],
    description='Updating apt',
)

APT_INSTALL = Command(
    cmd=['sudo',
         'apt',
         'install',
         '-y',
         'make',
         'pkg-config',
         'uuid-dev',
         'libyaml-dev',
         'python3-dev',
         'python3-pip'],
    description='Installing dependencies',
)

WHEEL_INSTALL = Command(
    cmd=['pip3',
         'install',
         'wheel'],
    description='Installing wheel',
)

E3_INSTALL = Command(
    cmd=['pip3',
         'install',
         'git+https://github.com/AdaCore/e3-core.git'],
    description='Installing e3-core',
)


if __name__ == '__main__':
    from argparse import ArgumentParser

    argument_parser = ArgumentParser()

    add_dry_run_argument(argument_parser)

    add_logging_group(argument_parser)
    add_interactive_group(argument_parser)
    add_update_group(argument_parser)
    add_package_group(argument_parser)

    (args, _) = argument_parser.parse_known_args()

    configure_logging(args)

    if (args.update_apt and
        (not args.interactive or
         input('Update apt? [Y/n] ') != 'n')):
        run_command_and_exit_on_fail(APT_UPDATE, args.dry_run)

    if (args.install_packages and
        (not args.interactive or
         input('Install packages? [Y/n] ') != 'n')):
        run_command_and_exit_on_fail(APT_INSTALL, args.dry_run)

    run_command_and_exit_on_fail(WHEEL_INSTALL, args.dry_run)
    run_command_and_exit_on_fail(E3_INSTALL, args.dry_run)
