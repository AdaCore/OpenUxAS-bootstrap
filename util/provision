#! /usr/bin/env python

from __future__ import annotations

import argparse
import logging
import os
import pathlib
import subprocess
import sys
import textwrap
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import (
        Any,
        Dict,
        Final,
        Iterator,
        IO,
        List,
        Literal,
        Optional,
        TextIO,
        Union,
    )

# Directory in which this script is executing.
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
PROVISION_DIR = os.path.join(ROOT_DIR, "provisioning")
SOFTWARE_DIR = os.path.join(PROVISION_DIR, "software")

APT_UPDATE = {
    'description': 'Updating apt',
    'command': ["apt",
                "update"]
}

APT_INSTALL = {
    'description': 'Installing dependencies',
    'command': ['apt',
                'install',
                '-y',
                'make',
                'cmake',
                'pkg-config',
                'uuid-dev',
                'libyaml-dev',
                'fontconfig',
                'libx11-xcb1',
                'libx11-6',
                'python3-dev',
                'python3-distutils',
                'python3-venv',
                'python3-pip']
}

GNAT_DIR = os.path.join(SOFTWARE_DIR, "gnat_community")
GNAT_BIN = 'gnat-bin'
GNAT_LINK = ('https://community.download.adacore.com/v1/' +
             '0cd3e2a668332613b522d9612ffa27ef3eb0815b?' +
             'filename=gnat-community-2019-20190517-x86_64-linux-bin')

GNAT_DOWNLOAD = {
    'description': 'Downloading GNAT community',
    'command': ['wget',
                '-nv',
                '-O',
                GNAT_BIN,
                GNAT_LINK]
}

GNAT_INSTALLER_LINK = (
    'https://github.com/AdaCore/gnat_community_install_script')

GNAT_INSTALLER_DIR = os.path.join(SOFTWARE_DIR,
                                  'gnat_community_install_script')
GNAT_INSTALLER_CLONE = {
    'description': 'Cloning GNAT community install script',
    'command': ['git',
                'clone',
                '--quiet',
                GNAT_INSTALLER_LINK]
}
GNAT_INSTALLER_BIN = 'install_package.sh'

GNAT_INSTALL_DIR = '/opt/gnat'
GNAT_INSTALL = {
    'description': 'Install GNAT community',
    'command': ['sh',
                GNAT_INSTALLER_BIN,
                os.path.join(GNAT_DIR, GNAT_BIN),
                GNAT_INSTALL_DIR]
}

VENV_INSTALL = {
    'description': 'Install the virtual environment for anod',
    'command': ['python',
                'install_env']
}


trial = True


def wrap(s: str) -> str:
    return textwrap.fill(textwrap.dedent(s), width=71, break_long_words=False,
                         subsequent_indent=" "*8)


def log_command(described_command: Dict, cwd: Optional[str] = None) -> None:
    logging.info(wrap(described_command['description']))
    process_command(described_command['command'], cwd)


def format_command(command: List[str], cwd: Optional[str] = None) -> str:
    if cwd is not None:
        # Perhaps a bit awkward, but illustrates what we will do and is also
        # valid execution syntax in the shell.
        return "(cd {} && {})".format(os.path.relpath(cwd, ROOT_DIR),
                                      " ".join(command))
    else:
        return " ".join(command)


def run_command(command: List[str], cwd: Optional[str] = None) -> None:
    logging.debug(format_command(command, cwd))
    subprocess.run(command, cwd=cwd)


def process_command(command: List[str], cwd: Optional[str] = None) -> None:
    if trial:
        print(format_command(command, cwd))
    else:
        run_command(command, cwd)


def install_initial_dependencies() -> int:
    log_command(APT_UPDATE)
    log_command(APT_INSTALL)

    return 0


def install_gnat() -> int:
    if trial:
        # This is a bit awkward, but illustrates what we will do.
        print("mkdir -p " + os.path.relpath(GNAT_DIR, ROOT_DIR))
    else:
        pathlib.Path(GNAT_DIR).mkdir(parents=True, exist_ok=True)

    if not os.path.exists(os.path.join(GNAT_DIR, "gnat-bin")):
        log_command(GNAT_DOWNLOAD, GNAT_DIR)

    if not os.path.exists(os.path.join(GNAT_INSTALLER_DIR,
                                       GNAT_INSTALLER_BIN)):
        if os.path.exists(GNAT_INSTALLER_DIR):
            logging.error(wrap(
                f"""\
                {os.path.relpath(GNAT_INSTALLER_DIR, ROOT_DIR)} exists but does
                not contain {os.path.relpath(GNAT_INSTALLER_BIN, ROOT_DIR)}.
                Please remove {os.path.relpath(GNAT_INSTALLER_DIR, ROOT_DIR)}
                and try again.
                """))
            return 1

        log_command(GNAT_INSTALLER_CLONE, SOFTWARE_DIR)

    log_command(GNAT_INSTALL, GNAT_INSTALLER_DIR)

    return 0


def install_venv() -> int:
    log_command(VENV_INSTALL)

    return 0


STREAM_FMT = "%(levelname)-8s %(message)s"
FILE_FMT = "%(asctime)s: %(name)-24s: %(levelname)-8s %(message)s"

if __name__ == '__main__':
    from argparse import ArgumentParser

    argument_parser = ArgumentParser()

    log_group = argument_parser.add_argument_group(title="Logging arguments")
    log_group.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="make the log output on the console more verbose (this "
        "sets the log level to DEBUG)",
    )
    log_group.add_argument(
        "--log-file",
        metavar="FILE",
        default=None,
        help="store all the logs into the specified file",
    )
    log_group.add_argument(
        "--loglevel",
        default=logging.ERROR,
        help="set the console log level",
        choices={
            "DEBUG": logging.DEBUG,
            "INFO": logging.INFO,
            "ERROR": logging.ERROR,
            "CRITICAL": logging.CRITICAL,
        },
    )

    trial_group = argument_parser.add_argument_group(title="Dry run")
    trial_group.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        default=False,
        help="print out actions to be taken, but do not make any changes"
    )

    args = argument_parser.parse_args()

    if args.verbose == 1:
        level = logging.INFO
    elif args.verbose == 2:
        level = logging.DEBUG
    else:
        level = args.loglevel

    logging.getLogger("").setLevel(logging.DEBUG)

    streamHandler = logging.StreamHandler()
    streamHandler.setFormatter(logging.Formatter(STREAM_FMT))
    streamHandler.setLevel(level)
    logging.getLogger("").addHandler(streamHandler)

    if args.log_file:
        fileHandler = logging.FileHandler(args.log_file)
        fileHandler.setFormatter(logging.Formatter(FILE_FMT))
        fileHandler.setLevel(min(level, logging.DEBUG))
        logging.getLogger("").addHandler(fileHandler)

    logging.debug("Debug message")

    trial = args.dry_run

    install_initial_dependencies()
    install_gnat()
    install_venv()
